name: Build and Release (macOS)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build macOS .app, zip, and create GitHub Release
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      EXPORT_DIR: ${{ runner.temp }}/export
      ZIP_NAME: Touch-Tab.zip
      APP_NAME: Touch-Tab.app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set build variables
        run: |
          # ----- CONFIGURE THESE VALUES -----
          # Replace with your actual scheme/project/workspace names.
          # If you use an Xcode workspace (CocoaPods / SPM workspace), set WORKSPACE and leave PROJECT empty.
          echo "SCHEME=Touch-Tab" >> $GITHUB_ENV
          echo "PROJECT=Touch-Tab.xcodeproj" >> $GITHUB_ENV
          echo "WORKSPACE=" >> $GITHUB_ENV
          echo "CONFIGURATION=Release" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${{ runner.temp }}/Touch-Tab.xcarchive" >> $GITHUB_ENV
          echo "EXPORT_PATH=${{ env.EXPORT_DIR }}" >> $GITHUB_ENV
          # ----- END CONFIG -----

      - name: Clean build directory
        run: |
          rm -rf "${EXPORT_DIR}" "${ARCHIVE_PATH}"
          mkdir -p "${EXPORT_DIR}"

      - name: Archive app
        run: |
          if [ -n "$WORKSPACE" ] && [ "$WORKSPACE" != " " ]; then
            xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration "$CONFIGURATION" -archivePath "$ARCHIVE_PATH" clean archive
          else
            xcodebuild -project "$PROJECT" -scheme "$SCHEME" -configuration "$CONFIGURATION" -archivePath "$ARCHIVE_PATH" clean archive
          fi

      - name: Copy and sign app
        run: |
          # Copy the app from the archive
          cp -r "${ARCHIVE_PATH}/Products/Applications/${APP_NAME}" "${EXPORT_PATH}/"
          # Ad-hoc sign the app
          codesign --force --deep --sign - "${EXPORT_PATH}/${APP_NAME}"

      - name: Verify exported app exists
        run: |
          ls -la "${EXPORT_PATH}"
          if [ ! -d "${EXPORT_PATH}/${APP_NAME}" ]; then
            echo "ERROR: ${APP_NAME} not found in ${EXPORT_PATH}"
            exit 1
          fi

      - name: Zip the .app (preserve resource forks)
        run: |
          ditto -c -k --sequesterRsrc --keepParent "${APP_NAME}" "${ZIP_NAME}"
          ls -la "${ZIP_NAME}"
        working-directory: ${{ env.EXPORT_DIR }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', github.run_number) }}
          name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('Build-{0}', github.run_number) }}
          body: |
            ## Installation Instructions
            
            1. Download `Touch-Tab.zip` from the assets below
            2. Unzip the archive and move `Touch-Tab.app` into the `Applications` folder
            3. Right-click the app and click `Open` (first time only)
            4. Click `Open` again in the security dialog that appears
            5. Grant accessibility permissions in `System Settings > Privacy & Security > Accessibility`
            
            **Note**: This app is ad-hoc signed. macOS may show a security warning on first launch - this is normal. Just right-click and select Open to bypass it.
          files: ${{ env.EXPORT_DIR }}/${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show release URL
        run: |
          echo "Release created: ${{ steps.create_release.outputs.html_url }}"
